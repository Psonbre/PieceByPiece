[gd_scene load_steps=21 format=4 uid="uid://dbkth5a8frbf4"]

[ext_resource type="PackedScene" uid="uid://bx8ht3bt5lbpu" path="res://Scenes/Menus/Worlds/world_template.tscn" id="1_jq5tp"]
[ext_resource type="Texture2D" uid="uid://cph5l5ltrh8xo" path="res://icon.svg" id="2_4fpvw"]
[ext_resource type="SpriteFrames" uid="uid://byvdlkywtissw" path="res://Scenes/PlayerSprites/player4_frames.tres" id="3_oit8j"]
[ext_resource type="Shader" path="res://Assets/Shaders/PuzzleOutline.gdshader" id="3_v8gl4"]

[sub_resource type="CircleShape2D" id="CircleShape2D_hcee6"]
radius = 11.55

[sub_resource type="Shader" id="Shader_ngv7x"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(600.0, 400.0);
uniform vec3 spiral_color: source_color = vec3(0.2, 0.6, 0.3);
uniform float frequency: hint_range(1.0, 10.0, 0.1) = 8.0;
uniform float speed: hint_range(-20.0, 20.0, 0.1) = 8.0;
uniform float brightness: hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float balance: hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float octaves: hint_range(1.0, 10.0, 1.0) = 4.0;
uniform float pixel_size: hint_range(1.0, 150.0, 1.0) = 10.0; // Size of pixelation effect
uniform float radius: hint_range(0.0, 1.0, 0.01) = 0.5; // Radius of the circular mask
uniform float interval: hint_range(1.0, 20.0, 1.0) = 10.0; // Interval for alternating spirals

float draw_spiral(vec2 uv, float rotation) {
    float uv_radius = length(uv);
    float uv_phi = atan(uv.y, uv.x) + rotation;
    float spiral_phi = (log(uv_radius) * frequency - uv_phi) / TAU;
    float spiral_ceil_radius = exp((TAU * ceil(spiral_phi) + uv_phi) / frequency);
    float spiral_floor_radius = exp((TAU * floor(spiral_phi) + uv_phi) / frequency);
    return mix(mix(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius), balance), max(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius)), balance);
}

void fragment() {
    vec2 uv = UV - 0.5;
    uv.x *= resolution.x / resolution.y;

    // Calculate the center of the current pixel block
    vec2 block_center_uv = (floor(uv * pixel_size) + 0.5) / pixel_size;

    // Apply circular mask to the block center to discard whole blocks
    float dist = length(block_center_uv); // Distance from center
    if (dist > radius) {
        discard; // Discard the entire block if its center is outside the circle
    }

    // Apply pixelation by rounding UV coordinates to the nearest \"pixel block\" inside the circular area
    vec2 pixel_uv = floor(uv * pixel_size) / pixel_size;
    
    // Calculate spiral effect within the pixelated UVs
    float spiral = 0.0;
    for (float i = 0.0; i < octaves; i += 1.0) {
        spiral += draw_spiral(pixel_uv, TIME * speed * (0.5 + sin(i)));
    }
    spiral /= octaves;

    // Make every other spiral transparent based on the interval parameter
    if (int(floor(spiral * interval)) % 2 == 1) {
        discard; // Make the spiral transparent if it's in an odd \"interval\"
    }

    vec3 color = spiral * spiral_color * brightness;
    COLOR = vec4(color, 1.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yvcba"]
resource_local_to_scene = true
shader = SubResource("Shader_ngv7x")
shader_parameter/resolution = Vector2(400, 400)
shader_parameter/spiral_color = Color(0.309804, 0, 0.603922, 1)
shader_parameter/frequency = 5.0
shader_parameter/speed = 2.0
shader_parameter/brightness = 10.0
shader_parameter/balance = 1.0
shader_parameter/octaves = 10.0
shader_parameter/pixel_size = 80.0
shader_parameter/radius = 0.18
shader_parameter/interval = 6.0

[sub_resource type="Shader" id="Shader_nqtq1"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(600.0, 400.0);
uniform vec3 spiral_color: source_color = vec3(0.2, 0.6, 0.3);
uniform float frequency: hint_range(1.0, 10.0, 0.1) = 8.0;
uniform float speed: hint_range(-20.0, 20.0, 0.1) = 8.0;
uniform float brightness: hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float balance: hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float octaves: hint_range(1.0, 10.0, 1.0) = 4.0;
uniform float pixel_size: hint_range(1.0, 150.0, 1.0) = 10.0; // Size of pixelation effect
uniform float radius: hint_range(0.0, 1.0, 0.01) = 0.5; // Radius of the circular mask
uniform float interval: hint_range(1.0, 20.0, 1.0) = 10.0; // Interval for alternating spirals

float draw_spiral(vec2 uv, float rotation) {
    float uv_radius = length(uv);
    float uv_phi = atan(uv.y, uv.x) + rotation;
    float spiral_phi = (log(uv_radius) * frequency - uv_phi) / TAU;
    float spiral_ceil_radius = exp((TAU * ceil(spiral_phi) + uv_phi) / frequency);
    float spiral_floor_radius = exp((TAU * floor(spiral_phi) + uv_phi) / frequency);
    return mix(mix(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius), balance), max(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius)), balance);
}

void fragment() {
    vec2 uv = UV - 0.5;
    uv.x *= resolution.x / resolution.y;

    // Calculate the center of the current pixel block
    vec2 block_center_uv = (floor(uv * pixel_size) + 0.5) / pixel_size;

    // Apply circular mask to the block center to discard whole blocks
    float dist = length(block_center_uv); // Distance from center
    if (dist > radius) {
        discard; // Discard the entire block if its center is outside the circle
    }

    // Apply pixelation by rounding UV coordinates to the nearest \"pixel block\" inside the circular area
    vec2 pixel_uv = floor(uv * pixel_size) / pixel_size;
    
    // Calculate spiral effect within the pixelated UVs
    float spiral = 0.0;
    for (float i = 0.0; i < octaves; i += 1.0) {
        spiral += draw_spiral(pixel_uv, TIME * speed * (0.5 + sin(i)));
    }
    spiral /= octaves;

    // Make every other spiral transparent based on the interval parameter
    if (int(floor(spiral * interval)) % 2 == 1) {
        discard; // Make the spiral transparent if it's in an odd \"interval\"
    }

    vec3 color = spiral * spiral_color * brightness;
    COLOR = vec4(color, 1.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_af5tj"]
resource_local_to_scene = true
shader = SubResource("Shader_nqtq1")
shader_parameter/resolution = Vector2(400, 400)
shader_parameter/spiral_color = Color(0.213528, 0.000123311, 0.691508, 1)
shader_parameter/frequency = 4.5
shader_parameter/speed = -2.0
shader_parameter/brightness = 10.0
shader_parameter/balance = 1.0
shader_parameter/octaves = 8.0
shader_parameter/pixel_size = 80.0
shader_parameter/radius = 0.18
shader_parameter/interval = 18.0

[sub_resource type="Gradient" id="Gradient_q1510"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_ku1i3"]
gradient = SubResource("Gradient_q1510")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_5slkh"]
particle_flag_disable_z = true
emission_shape = 1
emission_sphere_radius = 31.05
gravity = Vector3(0, 0, 0)
radial_accel_min = -9.64
radial_accel_max = 12.11
scale_max = 2.0
color = Color(0.721569, 0, 0.721569, 0.482353)
color_ramp = SubResource("GradientTexture1D_ku1i3")
turbulence_enabled = true

[sub_resource type="CircleShape2D" id="CircleShape2D_4at0v"]
radius = 35.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5mngl"]
size = Vector2(35, 70)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1lm0w"]
size = Vector2(35, 70)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_w7da3"]
size = Vector2(35, 70)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ib866"]
resource_local_to_scene = true
shader = ExtResource("3_v8gl4")
shader_parameter/speed = 1.405
shader_parameter/color = Vector4(1, 1, 1, 1)

[sub_resource type="Animation" id="Animation_bgnga"]
resource_name = "Preview"
length = 3.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Shape/PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 3),
"transitions": PackedFloat32Array(0.4, 1),
"update": 0,
"values": [Vector2(72, 30), Vector2(0, -16)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Shape/PlayerSprite/Sprite:animation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Jump"]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Shape/PlayerSprite/Sprite:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 3),
"transitions": PackedFloat32Array(1.5, 1),
"update": 0,
"values": [0.0, 6.28319]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Shape/PlayerSprite/Sprite:scale")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 3),
"transitions": PackedFloat32Array(1.49285, 1),
"update": 0,
"values": [Vector2(2.43608, 2.43608), Vector2(1e-05, 1e-05)]
}

[sub_resource type="Animation" id="Animation_ngr5p"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Shape/PlayerSprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(0.4),
"update": 0,
"values": [Vector2(72, 30)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Shape/PlayerSprite/Sprite:animation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [&"Jump"]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Shape/PlayerSprite/Sprite:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1.5),
"update": 0,
"values": [0.0]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Shape/PlayerSprite/Sprite:scale")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1.49285),
"update": 0,
"values": [Vector2(2.43608, 2.43608)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_sdhiq"]
_data = {
"Preview": SubResource("Animation_bgnga"),
"RESET": SubResource("Animation_ngr5p")
}

[node name="Portal World" instance=ExtResource("1_jq5tp")]
nb_of_levels = 5
nb_of_completed_levels = 0
world = 2

[node name="Shape" parent="." index="1"]
polygon = PackedVector2Array(-128, -128, -35, -128, -34.3275, -121.172, -32.3358, -114.606, -29.1014, -108.555, -24.7487, -103.251, -19.445, -98.8986, -13.3939, -95.6642, -6.82816, -93.6725, 2.14306e-15, -93, 6.82816, -93.6725, 13.3939, -95.6642, 19.445, -98.8986, 24.7487, -103.251, 29.1014, -108.555, 32.3358, -114.606, 34.3275, -121.172, 35, -128, 128, -128, 128, -35, 134.828, -34.3275, 141.394, -32.3358, 147.445, -29.1014, 152.749, -24.7487, 157.101, -19.445, 160.336, -13.3939, 162.327, -6.82816, 163, 0, 162.327, 6.82816, 160.336, 13.3939, 157.101, 19.445, 152.749, 24.7487, 147.445, 29.1014, 141.394, 32.3358, 134.828, 34.3275, 128, 35, 128, 128, -128, 128, -128, -128)

[node name="Background" parent="Shape" index="0"]
tile_map_data = PackedByteArray("AAD+//7/CAABAAEAAAD+////CAABAAIAAAD+/wAACAABAAEAAAD+/wEACAABAAEAAAD+/wIACAABAAEAAAD//wIACAABAAEAAAD//wEACAACAAEAAAD//wAACAABAAEAAAD/////CAABAAEAAAD///7/CAABAAIAAAAAAP7/CAABAAEAAAAAAP//CAABAAEAAAAAAAAACAABAAEAAAAAAAEACAABAAEAAAAAAAIACAABAAEAAAABAAIACAABAAEAAAABAAEACAABAAEAAAABAAAACAABAAEAAAABAP7/CAABAAEAAAABAP//CAACAAEAAAACAAIACAABAAIAAAACAAEACAABAAEAAAACAAAACAABAAIAAAACAP//CAABAAEAAAACAP7/CAABAAEAAAACAP3/AAAEAAEAAAABAP3/AAAEAAEAAAAAAP3/AAAEAAEAAAD///3/AAAEAAEAAAD+//3/AAAEAAEAAAD9//3/AAAEAAEAAAD9//7/AAAEAAEAAAD9////AAAEAAEAAAD9/wAAAAAEAAEAAAD9/wEAAAAEAAEAAAD9/wIAAAAEAAEAAAD9/wMAAAAEAAEAAAD+/wMAAAAEAAEAAAD//wMACAABAAEAAAAAAAMACAABAAIAAAABAAMACAABAAEAAAACAAMAAAAEAAEAAAADAAMAAAAEAAEAAAADAAIAAAAEAAEAAAADAAEACAABAAAAAAADAAAACAABAAEAAAADAP//CAABAAEAAAADAP7/AAAEAAEAAAADAP3/AAAEAAEAAAA=")

[node name="Foreground" parent="Shape" index="1"]
tile_map_data = PackedByteArray("AAD+/wIACAADAAEAAAACAAIACAAAAAEAAAD+/wAACAADAAEAAAD+/wEACAADAAEAAAABAAQAAAAAAAAAAAACAAEACAAAAAAAAAD+////CAADAAAAAAA=")

[node name="Portal" type="Area2D" parent="Shape" index="2"]
position = Vector2(0, -51)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Shape/Portal" index="0"]
shape = SubResource("CircleShape2D_hcee6")

[node name="Background" type="Sprite2D" parent="Shape/Portal" index="1"]
material = SubResource("ShaderMaterial_yvcba")
texture = ExtResource("2_4fpvw")

[node name="Foreground" type="Sprite2D" parent="Shape/Portal" index="2"]
material = SubResource("ShaderMaterial_af5tj")
texture = ExtResource("2_4fpvw")

[node name="Particles" type="GPUParticles2D" parent="Shape/Portal" index="3"]
amount = 40
process_material = SubResource("ParticleProcessMaterial_5slkh")
preprocess = 1.0

[node name="Cooldown" type="Timer" parent="Shape/Portal" index="4"]
wait_time = 0.1
one_shot = true

[node name="PlayerSprite" parent="Shape" index="3"]
position = Vector2(72, 30)

[node name="Sprite" parent="Shape/PlayerSprite" index="0"]
position = Vector2(1, -31)
scale = Vector2(2.43608, 2.43608)
sprite_frames = ExtResource("3_oit8j")
animation = &"Jump"
offset = Vector2(-0.410496, -1.33236)
flip_h = true

[node name="CollisionShape2D" parent="Shape/Connectors/RightConnector" index="0"]
shape = SubResource("CircleShape2D_4at0v")

[node name="LeftConnector" parent="Shape/Connectors" index="1"]
shape = 0

[node name="CollisionShape2D" parent="Shape/Connectors/LeftConnector" index="0"]
position = Vector2(-16.5, 0)
shape = SubResource("RectangleShape2D_5mngl")

[node name="TopConnector" parent="Shape/Connectors" index="2"]
shape = 1
type = -1

[node name="CollisionShape2D" parent="Shape/Connectors/TopConnector" index="0"]
shape = SubResource("RectangleShape2D_1lm0w")

[node name="CollisionShape2D" parent="Shape/Connectors/BottomConnector" index="0"]
shape = SubResource("RectangleShape2D_w7da3")

[node name="Overlay" parent="." index="2"]
polygon = PackedVector2Array(-128, -128, -35, -128, -34.3275, -121.172, -32.3358, -114.606, -29.1014, -108.555, -24.7487, -103.251, -19.445, -98.8986, -13.3939, -95.6642, -6.82816, -93.6725, 2.14306e-15, -93, 6.82816, -93.6725, 13.3939, -95.6642, 19.445, -98.8986, 24.7487, -103.251, 29.1014, -108.555, 32.3358, -114.606, 34.3275, -121.172, 35, -128, 128, -128, 128, -35, 134.828, -34.3275, 141.394, -32.3358, 147.445, -29.1014, 152.749, -24.7487, 157.101, -19.445, 160.336, -13.3939, 162.327, -6.82816, 163, 0, 162.327, 6.82816, 160.336, 13.3939, 157.101, 19.445, 152.749, 24.7487, 147.445, 29.1014, 141.394, 32.3358, 134.828, 34.3275, 128, 35, 128, 128, -128, 128, -128, -128)

[node name="WorldName" parent="Overlay" index="0"]
offset_top = 78.0
offset_bottom = 121.0
text = "ALIEN 
ADVENTURE"

[node name="Levels" parent="Overlay" index="1"]
text = "0/5"

[node name="Collectibles" parent="Overlay" index="2"]
text = "0/5"

[node name="Outline" parent="." index="3"]
material = SubResource("ShaderMaterial_ib866")
points = PackedVector2Array(-128, -128, -35, -128, -34.3275, -121.172, -32.3358, -114.606, -29.1014, -108.555, -24.7487, -103.251, -19.445, -98.8986, -13.3939, -95.6642, -6.82816, -93.6725, 2.14306e-15, -93, 6.82816, -93.6725, 13.3939, -95.6642, 19.445, -98.8986, 24.7487, -103.251, 29.1014, -108.555, 32.3358, -114.606, 34.3275, -121.172, 35, -128, 128, -128, 128, -35, 134.828, -34.3275, 141.394, -32.3358, 147.445, -29.1014, 152.749, -24.7487, 157.101, -19.445, 160.336, -13.3939, 162.327, -6.82816, 163, 0, 162.327, 6.82816, 160.336, 13.3939, 157.101, 19.445, 152.749, 24.7487, 147.445, 29.1014, 141.394, 32.3358, 134.828, 34.3275, 128, 35, 128, 128, -128, 128, -128, -128)

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="4"]
libraries = {
"": SubResource("AnimationLibrary_sdhiq")
}

[connection signal="body_entered" from="Shape/Portal" to="Shape/Portal" method="_on_body_entered"]
[connection signal="body_exited" from="Shape/Portal" to="Shape/Portal" method="_on_body_exited"]
