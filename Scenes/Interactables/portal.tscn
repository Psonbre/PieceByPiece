[gd_scene load_steps=11 format=3 uid="uid://cqfgi7k08veo6"]

[ext_resource type="Texture2D" uid="uid://cph5l5ltrh8xo" path="res://Assets/Sprites/portal.svg" id="1_bkrhv"]
[ext_resource type="Script" path="res://Scripts/portal.gd" id="1_en4pa"]

[sub_resource type="CircleShape2D" id="CircleShape2D_hcee6"]
radius = 11.55

[sub_resource type="Shader" id="Shader_ngv7x"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(600.0, 400.0);
uniform vec3 spiral_color: source_color = vec3(0.2, 0.6, 0.3);
uniform float frequency: hint_range(1.0, 10.0, 0.1) = 8.0;
uniform float speed: hint_range(-20.0, 20.0, 0.1) = 8.0;
uniform float brightness: hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float balance: hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float octaves: hint_range(1.0, 10.0, 1.0) = 4.0;
uniform float pixel_size: hint_range(1.0, 150.0, 1.0) = 10.0; // Size of pixelation effect
uniform float radius: hint_range(0.0, 1.0, 0.01) = 0.5; // Radius of the circular mask
uniform float interval: hint_range(1.0, 20.0, 1.0) = 10.0; // Interval for alternating spirals

float draw_spiral(vec2 uv, float rotation) {
    float uv_radius = length(uv);
    float uv_phi = atan(uv.y, uv.x) + rotation;
    float spiral_phi = (log(uv_radius) * frequency - uv_phi) / TAU;
    float spiral_ceil_radius = exp((TAU * ceil(spiral_phi) + uv_phi) / frequency);
    float spiral_floor_radius = exp((TAU * floor(spiral_phi) + uv_phi) / frequency);
    return mix(mix(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius), balance), max(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius)), balance);
}

void fragment() {
    vec2 uv = UV - 0.5;
    uv.x *= resolution.x / resolution.y;

    // Calculate the center of the current pixel block
    vec2 block_center_uv = (floor(uv * pixel_size) + 0.5) / pixel_size;

    // Apply circular mask to the block center to discard whole blocks
    float dist = length(block_center_uv); // Distance from center
    if (dist > radius) {
        discard; // Discard the entire block if its center is outside the circle
    }

    // Apply pixelation by rounding UV coordinates to the nearest \"pixel block\" inside the circular area
    vec2 pixel_uv = floor(uv * pixel_size) / pixel_size;
    
    // Calculate spiral effect within the pixelated UVs
    float spiral = 0.0;
    for (float i = 0.0; i < octaves; i += 1.0) {
        spiral += draw_spiral(pixel_uv, TIME * speed * (0.5 + sin(i)));
    }
    spiral /= octaves;

    // Make every other spiral transparent based on the interval parameter
    if (int(floor(spiral * interval)) % 2 == 1) {
        discard; // Make the spiral transparent if it's in an odd \"interval\"
    }

    vec3 color = spiral * spiral_color * brightness;
    COLOR = vec4(color, 1.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_avu2b"]
resource_local_to_scene = true
shader = SubResource("Shader_ngv7x")
shader_parameter/resolution = Vector2(400, 400)
shader_parameter/spiral_color = Color(0.309804, 0, 0.603922, 1)
shader_parameter/frequency = 5.0
shader_parameter/speed = 2.0
shader_parameter/brightness = 10.0
shader_parameter/balance = 1.0
shader_parameter/octaves = 10.0
shader_parameter/pixel_size = 80.0
shader_parameter/radius = 0.18
shader_parameter/interval = 6.0

[sub_resource type="Shader" id="Shader_nqtq1"]
code = "shader_type canvas_item;

uniform vec2 resolution = vec2(600.0, 400.0);
uniform vec3 spiral_color: source_color = vec3(0.2, 0.6, 0.3);
uniform float frequency: hint_range(1.0, 10.0, 0.1) = 8.0;
uniform float speed: hint_range(-20.0, 20.0, 0.1) = 8.0;
uniform float brightness: hint_range(1.0, 10.0, 0.1) = 5.0;
uniform float balance: hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float octaves: hint_range(1.0, 10.0, 1.0) = 4.0;
uniform float pixel_size: hint_range(1.0, 150.0, 1.0) = 10.0; // Size of pixelation effect
uniform float radius: hint_range(0.0, 1.0, 0.01) = 0.5; // Radius of the circular mask
uniform float interval: hint_range(1.0, 20.0, 1.0) = 10.0; // Interval for alternating spirals

float draw_spiral(vec2 uv, float rotation) {
    float uv_radius = length(uv);
    float uv_phi = atan(uv.y, uv.x) + rotation;
    float spiral_phi = (log(uv_radius) * frequency - uv_phi) / TAU;
    float spiral_ceil_radius = exp((TAU * ceil(spiral_phi) + uv_phi) / frequency);
    float spiral_floor_radius = exp((TAU * floor(spiral_phi) + uv_phi) / frequency);
    return mix(mix(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius), balance), max(abs(uv_radius - spiral_ceil_radius), abs(uv_radius - spiral_floor_radius)), balance);
}

void fragment() {
    vec2 uv = UV - 0.5;
    uv.x *= resolution.x / resolution.y;

    // Calculate the center of the current pixel block
    vec2 block_center_uv = (floor(uv * pixel_size) + 0.5) / pixel_size;

    // Apply circular mask to the block center to discard whole blocks
    float dist = length(block_center_uv); // Distance from center
    if (dist > radius) {
        discard; // Discard the entire block if its center is outside the circle
    }

    // Apply pixelation by rounding UV coordinates to the nearest \"pixel block\" inside the circular area
    vec2 pixel_uv = floor(uv * pixel_size) / pixel_size;
    
    // Calculate spiral effect within the pixelated UVs
    float spiral = 0.0;
    for (float i = 0.0; i < octaves; i += 1.0) {
        spiral += draw_spiral(pixel_uv, TIME * speed * (0.5 + sin(i)));
    }
    spiral /= octaves;

    // Make every other spiral transparent based on the interval parameter
    if (int(floor(spiral * interval)) % 2 == 1) {
        discard; // Make the spiral transparent if it's in an odd \"interval\"
    }

    vec3 color = spiral * spiral_color * brightness;
    COLOR = vec4(color, 1.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1hfet"]
resource_local_to_scene = true
shader = SubResource("Shader_nqtq1")
shader_parameter/resolution = Vector2(400, 400)
shader_parameter/spiral_color = Color(0.213528, 0.000123311, 0.691508, 1)
shader_parameter/frequency = 4.5
shader_parameter/speed = -2.0
shader_parameter/brightness = 10.0
shader_parameter/balance = 1.0
shader_parameter/octaves = 8.0
shader_parameter/pixel_size = 80.0
shader_parameter/radius = 0.18
shader_parameter/interval = 18.0

[sub_resource type="Gradient" id="Gradient_q1510"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_ku1i3"]
gradient = SubResource("Gradient_q1510")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_5slkh"]
particle_flag_disable_z = true
emission_shape = 1
emission_sphere_radius = 31.05
gravity = Vector3(0, 0, 0)
radial_accel_min = -9.64
radial_accel_max = 12.11
scale_max = 2.0
color = Color(0.721569, 0, 0.721569, 0.482353)
color_ramp = SubResource("GradientTexture1D_ku1i3")
turbulence_enabled = true

[node name="Portal" type="Area2D"]
script = ExtResource("1_en4pa")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_hcee6")

[node name="Background" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_avu2b")
texture = ExtResource("1_bkrhv")

[node name="Foreground" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_1hfet")
texture = ExtResource("1_bkrhv")

[node name="Particles" type="GPUParticles2D" parent="."]
amount = 40
process_material = SubResource("ParticleProcessMaterial_5slkh")
preprocess = 1.0

[node name="Cooldown" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
